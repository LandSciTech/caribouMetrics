% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/results.R
\name{results}
\alias{results}
\alias{results,CaribouHabitat-method}
\alias{results,DisturbanceMetrics-method}
\title{Extract results}
\usage{
results(x, ...)

\S4method{results}{CaribouHabitat}(x, type = "both")

\S4method{results}{DisturbanceMetrics}(x, type = "disturbanceMetrics")
}
\arguments{
\item{x}{A CaribouHabitat or DisturbanceMetrics object.}

\item{...}{arguments passed to methods}

\item{type}{string. The name of the slot to return. If x is a CaribouHabitat
object the default is "both" and the habitatUse and processedData will be
returned as a RasterStack.}
}
\value{
By default a RasterStack if x is a CaribouHabitat object and a
data.frame if x is a DisturbanceMetrics object.
}
\description{
Extract results from CaribouHabitat or DisturbanceMetrics object.
}
\examples{
# create example rasters for habitat
lc <- raster::raster(xmn = 0, xmx = 25000, ymn = 0, ymx = 25000, 
                     resolution = 250, crs = 5070)
lc[] <- 0
nd <- lc
nd[1:30, 1:30] <- 1
ad <- lc
ad[30:50, 3:50] <- 1
lc[] <- 1
lc[70:100, 70:100] <- 2

# create sf objects
lf <- sf::st_as_sf(sf::st_sfc(list(sf::st_linestring(matrix(c(0, 0, 10000, 10000),
                                                            ncol = 2, byrow = TRUE))),
                              crs = 5070))
esk <- sf::st_as_sf(sf::st_sfc(list(sf::st_linestring(matrix(c(0, 10000, 10000, 0),
                                                            ncol = 2, byrow = TRUE))),
                              crs = 5070))


projPol <- sf::st_sf(sf::st_as_sfc(sf::st_bbox(ad)))

# calculate relative probability of use
res <- caribouHabitat(landCover = lc,
               linFeat = lf,
               esker = esk,
               natDist = nd,
               anthroDist = ad,
               projectPoly = projPol,
               caribouRange = "Nipigon",
               winArea = 1000 #leave as default NULL except for small examples
)

# default gets raster stack of both habitatUse and processedData slots
resBoth <- results(res)

# provide a slot name to get one of them
resHabUse <- results(res, type = "habitatUse")

# create example rasters for disturbance metrics
lc <- raster::raster(nrows = 10, ncols = 10, xmn = 0, xmx = 10, ymn = 0, ymx = 10, crs = 5070)
nd <- lc
nd[1:3, 1:3] <- 1
ad <- lc
ad[3:5, 3:5] <- 1
lc[] <- 1

# create sf objects
lf <- sf::st_as_sf(sf::st_sfc(list(sf::st_linestring(matrix(c(0, 0, 10, 10), 
                                                            ncol = 2, byrow = TRUE))),
                              crs = 5070))
projPol <- sf::st_sf(sf::st_as_sfc(sf::st_bbox(ad)))

# calculate disturbance
dm <- disturbanceMetrics(landCover = lc,
                         linFeat = lf,
                         natDist = nd,
                         anthroDist = ad,
                         projectPoly = projPol,
                         padFocal = TRUE,
                         bufferWidth = 1)

# default is disturbance metrics table
resDM <- results(dm)

# can get other slots as well
resDMrasters <- results(dm, type = "processedData")

}
\seealso{
Caribou habitat functions:
\code{\link{CaribouHabitat-class}},
\code{\link{calcBinaryUse}()},
\code{\link{caribouHabitat}()},
\code{\link{coefTableHR}},
\code{\link{coefTableStd}},
\code{\link{fnlcToResType}},
\code{\link{loadSpatialInputs}()},
\code{\link{plcToResType}},
\code{\link{rasterizeLineDensity}()},
\code{\link{reclassPLC}()},
\code{\link{resTypeCode}},
\code{\link{rfuToResType}},
\code{\link{threshTable}},
\code{\link{updateCaribou}()}

Functions for calculating disturbance:
\code{\link{DisturbanceMetrics-class}},
\code{\link{disturbanceMetrics}()},
\code{\link{reclassDist}()},
\code{\link{updateDisturbance}()}
}
\concept{disturbance}
\concept{habitat}
